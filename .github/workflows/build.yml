name: Build and Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "version=$(grep '^version' ./Cargo.toml | sed 's/version = //g' | tr -d '\"')" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RESPONSE_CODE=$(curl --write-out "%{http_code}" --silent --output /dev/null "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v${{ env.version }}")
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "exists=true" >> $GITHUB_ENV
            echo "Release v${{ env.version }} already exists. Exiting."
            exit 1
          else
            echo "exists=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
        include:
          - os: ubuntu-latest
            targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu,i686-unknown-linux-gnu,armv7-unknown-linux-gnueabi
          - os: macos-latest
            targets: x86_64-apple-darwin,aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.targets }}
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Install dependencies for Linux targets
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo dpkg --add-architecture amd64
          sudo apt-get update --fix-missing
          sudo apt-get install -y gcc-multilib g++-multilib pkg-config libssl-dev libasound2-dev libudev-dev:i386 libudev-dev:amd64
          sudo apt-get install -y libc6:i386 libgcc1:i386 libstdc++6:i386
          sudo apt-get install -y libc6:amd64 libgcc1:amd64 libstdc++6:amd64
          # Добавляем кросс-компиляцию для aarch64
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          # Установка зависимостей для ARMv7
          sudo apt-get install -y gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
          sudo apt-get install -y libc6-dev-armhf-cross

      - name: Build
        run: |
          for TARGET in $(echo ${{ matrix.targets }} | tr "," "\n")
          do
            rustup target add $TARGET || true
            if ! rustup target list | grep -q "$TARGET (installed)"; then
              echo "Error: Target $TARGET not installed"
              exit 1
            fi
            cargo build --release --bin virtualport --target $TARGET
            mv target/$TARGET/release/virtualport target/$TARGET/release/virtualport-$TARGET
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: virtualport-${{ matrix.os }}
          path: target/*/*/virtualport-*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Read version
        id: version
        run: echo "version=$(grep '^version' ./Cargo.toml | sed 's/version = //g' | tr -d '\"')" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false
          files: |
            virtualport-*/*/release/virtualport-*
            LICENSE
            VERSION
